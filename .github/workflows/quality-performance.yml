name: Quality & Performance Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  docker-quality:
    name: Docker Build & Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Docker Compose Build
        run: |
          echo "üê≥ Building Docker containers..."
          docker compose build
          
      - name: Docker Compose Up
        run: |
          echo "üöÄ Starting services..."
          docker compose up -d
          
      - name: Wait for Services
        run: |
          echo "‚è≥ Waiting for services to be ready..."
          
          # Wait for backend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/health/ 2>/dev/null; do sleep 2; done' || {
            echo "‚ùå Backend failed to start"
            docker compose logs backend
            exit 1
          }
          
          # Wait for frontend to be ready
          timeout 60 bash -c 'until curl -f http://localhost:3000 2>/dev/null; do sleep 2; done' || {
            echo "‚ùå Frontend failed to start"
            docker compose logs frontend
            exit 1
          }
          
          echo "‚úÖ All services are ready"
          
      - name: Service Health Check
        run: |
          echo "üîç Running health checks..."
          
          # Check backend health
          echo "Backend health:"
          curl -s http://localhost:8000/api/health/ | jq '.' || echo "Backend health check failed"
          
          # Check frontend is serving
          echo "Frontend status:"
          frontend_status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$frontend_status" = "200" ]; then
            echo "‚úÖ Frontend responding with status $frontend_status"
          else
            echo "‚ùå Frontend responding with status $frontend_status"
            exit 1
          fi
          
      - name: Container Resource Usage
        run: |
          echo "üìä Container resource usage:"
          docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
          
      - name: Docker Logs
        if: failure()
        run: |
          echo "üìã Docker logs for debugging:"
          docker compose logs
          
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          docker compose down -v

  integration-quality:
    name: Integration Quality Check
    runs-on: ubuntu-latest
    needs: [docker-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Docker Compose Validation
        run: |
          echo "üê≥ Validating Docker configuration..."
          
          # Check if docker compose files are valid
          docker compose config
          
          # Check for common issues
          echo "üìã Docker configuration analysis:"
          
          # Check for exposed secrets
          if grep -r "password\|secret\|key" docker compose.yml docker compose.*.yml 2>/dev/null | grep -v "SECRET_KEY_FILE\|PASSWORD_FILE"; then
            echo "‚ö†Ô∏è  Potential secrets in Docker files (review these):"
            grep -r "password\|secret\|key" docker compose.yml docker compose.*.yml 2>/dev/null | grep -v "SECRET_KEY_FILE\|PASSWORD_FILE"
          fi
          
          # Check for production-ready configurations
          if ! grep -q "restart:" docker compose.yml 2>/dev/null; then
            echo "‚ö†Ô∏è  Consider adding restart policies for production"
          fi
          
          echo "‚úÖ Docker configuration validated"
          
      - name: API Documentation Check
        run: |
          echo "üìö Checking API documentation..."
          
          # Check if API documentation exists
          if [ -f "backend/employee/openapi.json" ] || [ -f "backend/employee/schema.yml" ]; then
            echo "‚úÖ API documentation found"
          else
            echo "‚ö†Ô∏è  No API documentation found. Consider adding OpenAPI/Swagger docs"
          fi
          
      - name: Environment Configuration Check
        run: |
          echo "üîß Checking environment configuration..."
          
          # Check for .env.example
          if [ -f ".env.example" ]; then
            echo "‚úÖ Environment example file found"
          else
            echo "‚ö†Ô∏è  No .env.example file found. Consider adding one for setup instructions"
          fi
          
          # Check for sensitive files in git
          if [ -f ".env" ]; then
            echo "‚ùå .env file found in repository! This should be in .gitignore"
            exit 1
          fi
          
          echo "‚úÖ Environment configuration check passed"

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [docker-quality, integration-quality]
    if: always()
    
    steps:
      - name: Performance Summary
        run: |
          echo "üìä Quality & Performance Check Summary"
          echo "=================================="
          
          # Check job statuses
          docker_status="${{ needs.docker-quality.result }}"
          integration_status="${{ needs.integration-quality.result }}"
          
          echo "Docker Quality: $docker_status"
          echo "Integration Quality: $integration_status"
          
          # Overall status
          if [ "$docker_status" = "success" ] && [ "$integration_status" = "success" ]; then
            echo ""
            echo "üéâ All quality & performance checks passed!"
            echo "‚úÖ Code is ready for deployment"
          else
            echo ""
            echo "‚ùå Some quality checks failed"
            echo "üîß Please review and fix the issues above"
            exit 1
          fi